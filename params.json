{"name":"Tissue","tagline":"Create Github issues from your code's Exceptions","body":"Create Github issues from your ``catch {}`` blocks. I was heavily inspired by [ohCrash](https://ohcrash.com/).\r\n\r\nWhen you call ``Tissue::create``, a Github issue is created in the repo of your choice and a \"bug\" label is automatically applied. Duplicates are detected, to a certain extent.\r\n\r\nThe name comes from \"Throw ISSUE\" — genius, I know.\r\n\r\n## Install\r\n\r\n``` bash\r\n$ composer require bouiboui/tissue\r\n```\r\n\r\nCreate a local ``config/config.yaml`` file from the template in [``config/config.yaml.dist``](https://github.com/bouiboui/tissue/blob/master/config/config.yaml.dist)\r\n\r\n## Usage\r\n\r\n**The easy way: `bindUncaughtExceptionHandler`**\r\n``` php\r\n// Not shown: include composer's autoload.php\r\nuse bouiboui\\Tissue\\Tissue;\r\n\r\n// All uncaught exceptions will trigger the creation of a Github issue\r\nTissue::bindUncaughtExceptionHandler();\r\n```\r\n**The catch-block-specific way: `createFromException`**\r\n``` php\r\n// Not shown: include composer's autoload.php\r\nuse bouiboui\\Tissue\\Tissue;\r\n\r\ntry {\r\n\r\n    throw new ErrorException('This is your issue title and message.');\r\n\r\n} catch (\\ErrorException $e) {\r\n\r\n    // Only exceptions caught by this block will create Github issues\r\n    $result = Tissue::createFromException($e);\r\n\r\n}\r\n```\r\n\r\n**The \"customized output\" way: `create`**\r\n``` php\r\n// Not shown: include composer's autoload.php\r\nuse bouiboui\\Tissue\\Tissue;\r\n\r\ntry {\r\n\r\n    throw new ErrorException('This is your issue title and message.');\r\n\r\n} catch (\\ErrorException $e) {\r\n\r\n    // Set any parameter to null if you don't want to display it in the issue\r\n    $result = Tissue::create(\r\n        $e->getMessage(),\r\n        $e->getCode(),\r\n        $e->getSeverity(),\r\n        $e->getFile(),\r\n        $e->getLine(),\r\n        $e->getTraceAsString()\r\n    );\r\n    \r\n    var_dump($result);\r\n\r\n}\r\n```\r\nCreates the following issue:\r\n\r\n![Something like this](http://i.imgur.com/N5r8Ljh.png)\r\n![Something like this](http://i.imgur.com/a96l7hR.png)\r\n\r\nAnd outputs the following:\r\n\r\n``` php\r\narray(3) {\r\n  [\"duplicate\"]=>\r\n  bool(false)\r\n  [\"number\"]=>\r\n  int(35)\r\n  [\"url\"]=>\r\n  string(50) \"https://api.github.com/repos/author/name/issues/35\"\r\n}\r\n```\r\n\r\nFor security purposes, if your Github repository is public you should at the *very* least disable the `trace` parameter, unless you want strangers on the Internet to know the full path to the files on your server. [You may also want to read this](https://www.owasp.org/index.php/Improper_Error_Handling#Description).\r\n\r\n## Credits\r\n\r\n- bouiboui — [Github](https://github.com/bouiboui) [Twitter](https://twitter.com/j_____________n) [Website](http://cod3.net)\r\n- [All contributors](https://github.com/bouiboui/tissue/graphs/contributors)\r\n\r\n## License\r\n\r\nUnlicense. Public domain, basically. Please treat it kindly. See [License File](LICENSE) for more information. \r\n\r\nThis project uses the following open source projects \r\n- [knplabs/github-api](https://github.com/KnpLabs/php-github-api) by [KnpLabs](https://github.com/KnpLabs) — [License](https://github.com/KnpLabs/php-github-api/blob/master/LICENSE).\r\n- [symfony/yaml](https://github.com/symfony/yaml) by [Fabien Potencier](https://github.com/fabpot) — [License](https://github.com/symfony/yaml/blob/master/LICENSE).\r\n- [phpunit/phpunit](https://github.com/sebastianbergmann/phpunit) by [Sebastian Bergmann](https://github.com/sebastianbergmann) — [License](https://github.com/sebastianbergmann/phpunit/blob/master/LICENSE).\r\n\r\n[ico-version]: https://img.shields.io/packagist/v/bouiboui/tissue.svg?style=flat-square\r\n[ico-license]: https://img.shields.io/badge/license-Unlicense-brightgreen.svg?style=flat-square\r\n\r\n[link-packagist]: https://packagist.org/packages/bouiboui/tissue","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}